generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id               String            @id @default(uuid())
  shopDomain       String            @unique
  ownerEmail       String?
  status           String            @default("active")
  installedAt      DateTime?         @default(now())
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  logs             Log[]
  productVariants  ProductVariant[]
  products         Product[]
  profileRules     ProfileRule[]
  shippingProfiles ShippingProfile[]
  syncJobs         SyncJob[]

  @@map("merchants")
}

model ShippingProfile {
  id                 String              @id @default(uuid())
  merchantId         String
  shopifyProfileId   String
  name               String
  description        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  logsFrom           Log[]               @relation("LogFromProfile")
  logsTo             Log[]               @relation("LogToProfile")
  productAssignments ProductAssignment[]
  profileRules       ProfileRule[]
  merchant           Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@unique([merchantId, shopifyProfileId])
  @@map("shipping_profiles")
}

model ProfileRule {
  id                 String              @id @default(uuid())
  merchantId         String
  shippingProfileId  String
  priority           Int                 @default(0)
  matchType          String
  operator           String
  matchValue         Json
  isNegation         Boolean             @default(false)
  active             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  logs               Log[]
  productAssignments ProductAssignment[]
  merchant           Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  shippingProfile    ShippingProfile     @relation(fields: [shippingProfileId], references: [id], onDelete: Cascade)

  @@map("profile_rules")
}

model Product {
  id               String              @id @default(uuid())
  merchantId       String
  shopifyProductId String
  title            String?
  vendor           String?
  bodyHtml         String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  lastSyncedAt     DateTime?
  logs             Log[]
  assignments      ProductAssignment[]
  collections      ProductCollection[]
  metafields       ProductMetafield[]
  tags             ProductTag[]
  variants         ProductVariant[]
  merchant         Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@unique([merchantId, shopifyProductId])
  @@map("products")
}

model ProductVariant {
  id                String              @id @default(uuid())
  productId         String
  merchantId        String
  shopifyVariantId  String
  sku               String?
  price             Decimal?            @db.Decimal(12, 2)
  weight            Decimal?            @db.Decimal(12, 3)
  inventoryQuantity Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  lastSyncedAt      DateTime?
  logs              Log[]
  assignments       ProductAssignment[]
  merchant          Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([merchantId, shopifyVariantId])
  @@map("product_variants")
}

model ProductCollection {
  productId    String
  collectionId String
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@map("product_collections")
}

model ProductTag {
  productId String
  tag       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, tag])
  @@map("product_tags")
}

model ProductMetafield {
  id        String   @id @default(uuid())
  productId String
  namespace String?
  key       String?
  value     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_metafields")
}

model ProductAssignment {
  id                String          @id @default(uuid())
  productId         String
  variantId         String?
  shippingProfileId String
  reasonRuleId      String?
  isManualOverride  Boolean         @default(false)
  assignedAt        DateTime        @default(now())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  product           Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  reasonRule        ProfileRule?    @relation(fields: [reasonRuleId], references: [id])
  shippingProfile   ShippingProfile @relation(fields: [shippingProfileId], references: [id], onDelete: Cascade)
  variant           ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([productId, variantId])
  @@map("product_assignments")
}

model SyncJob {
  id                String    @id @default(uuid())
  merchantId        String
  status            String    @default("pending")
  startedAt         DateTime?
  completedAt       DateTime?
  totalProducts     Int?
  processedProducts Int?
  errorMessage      String?
  merchant          Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("sync_jobs")
}

model Log {
  id            String           @id @default(uuid())
  merchantId    String
  productId     String?
  variantId     String?
  action        String
  fromProfileId String?
  toProfileId   String?
  ruleId        String?
  message       String?
  createdAt     DateTime         @default(now())
  fromProfile   ShippingProfile? @relation("LogFromProfile", fields: [fromProfileId], references: [id])
  merchant      Merchant         @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  product       Product?         @relation(fields: [productId], references: [id])
  rule          ProfileRule?     @relation(fields: [ruleId], references: [id])
  toProfile     ShippingProfile? @relation("LogToProfile", fields: [toProfileId], references: [id])
  variant       ProductVariant?  @relation(fields: [variantId], references: [id])

  @@map("logs")
}

model PricingPlan {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  price       Decimal?  @default(0.0) @db.Decimal(10, 2)
  currency    String?   @default("USD") @db.VarChar(10)
  interval    String?   @default("month") @db.VarChar(20)
  isActive    Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @db.Timestamp(6)
  updatedAt   DateTime? @default(now()) @updatedAt @db.Timestamp(6)
}
